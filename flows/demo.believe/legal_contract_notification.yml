id: legal_contract_notification
namespace: demo.believe.legal
tasks:

  - id: query
    type: io.kestra.plugin.jdbc.snowflake.Query
    url: jdbc:snowflake://tsldcqi-pf95942.snowflakecomputing.com?warehouse=COMPUTE_WH
    username: "{{ secret('SNOWFLAKE_USER') }}"
    password: "{{ secret('SNOWFLAKE_PASSWORD') }}"
    sql: |
      SELECT DISTINCT
          chart.artist,
          chart.streams,
          chart.royalties,
          contract.contract_last_date,
          contract.contract_start_date,
          DATEDIFF(day, contract_start_date, contract_last_date) AS contract_duration
      FROM KESTRA_DEMO.PUBLIC.TOPCHART AS chart
      INNER JOIN KESTRA_DEMO.LEGAL.CONTRACT AS contract
      ON chart.artist = contract.artist
      WHERE contract_last_date <= '2024-02-01'
      AND royalties > 30000000
    fetch: true

  - id: send_messages
    type: io.kestra.core.tasks.flows.EachParallel
    value: '{{ outputs.query.rows }}'
    tasks:
      - id: slack_message
        type: io.kestra.plugin.notifications.slack.SlackIncomingWebhook
        url: "{{ secret('SLACK_WEBHOOK')}}"
        payload: |
          {
            "channel": "U052JMPLBM3",
            "text": {{ taskrun.value | json }}
          }

triggers:
  - id: multiple-listen-flow
    type: io.kestra.core.models.triggers.types.Flow
    conditions:
      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition
        in:
          - SUCCESS
      - id: multiple
        type: io.kestra.core.models.conditions.types.MultipleCondition
        window: P1D
        windowAdvance: P0D
        conditions:
          contract:
            type: io.kestra.core.models.conditions.types.ExecutionFlowCondition
            namespace: demo.believe.royalties
            flowId: load_data_snowflake
          snowflake:
            type: io.kestra.core.models.conditions.types.ExecutionFlowCondition
            namespace: demo.believe.legal
            flowId: contract_to_snowflake