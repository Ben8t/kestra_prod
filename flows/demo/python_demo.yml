id: python_demo
namespace: demo
labels:
  status: üèÉ In Progress

tasks:

  - id: download_data
    type: io.kestra.plugin.fs.http.Download
    uri: https://api.worldbank.org/v2/en/indicator/SP.DYN.LE00.IN?downloadformat=csv

  - id: uncompress
    type: io.kestra.plugin.compress.ArchiveDecompress
    from: '{{ outputs.download_data.uri }}'
    algorithm: ZIP

  - id: process_data
    type: io.kestra.core.tasks.scripts.Python
    inputFiles:
      data.csv: '{{ outputs.uncompress.files["API_SP.DYN.LE00.IN_DS2_en_csv_v2_5358385.csv"] }}'
      main.py: |
        from kestra import Kestra
        import pandas as pd

        data = pd.read_csv("data.csv", skiprows=4)
        usa_data = (
          data
          .query('`Country Code` == "USA"')
          .melt(id_vars=['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'], var_name='year', value_name='life_expectancy')
          .drop(columns=['Country Code', 'Indicator Name', 'Indicator Code'])
          .dropna()
        )

        usa_data.to_csv("{{ outputFiles['agg_data.csv'] }}", index=False)
    outputFiles:
      - agg_data.csv

  - id: create_plot
    type: io.kestra.core.tasks.scripts.Python
    outputDirs:
      - plots
    inputFiles:
      agg_data.csv: '{{ outputs.process_data.outputFiles["agg_data.csv"] }}'
      main.py: |
        from kestra import Kestra
        import pandas as pd
        import seaborn as sns
        import matplotlib.pyplot as plt

        data = pd.read_csv("agg_data.csv")
        sns.lineplot(x='year', y='life_expectancy', data=data)

        # set chart title and axis labels
        plt.title('Life expectancy at birth in the United States')
        plt.xlabel('Year')
        plt.ylabel('Life expectancy (years)')

        print("{{ outputDirs }}")

        plt.show()
        print(data)

#triggers:
#  - id: schedule
#    type: io.kestra.core.models.triggers.types.Schedule
#    cron: "*/15 * * * *"

taskDefaults:
  - type: io.kestra.core.tasks.scripts.Python
    values:
      commands:
        - python main.py
      dockerOptions:
        image: custom_python
        pullImage: false
      runner: DOCKER
      virtualEnv: false
