id: forecast_product_orders
namespace: shiny_rocks.sales
description: |
  Shiny Rocks sells two main products. In this flow, we compute orders forecast in parallel for each of these two.
  We first query data of historic orders, serving as the base reference for forecast.
  Then for each product, we compute forecast in Python thanks to the [Prophet library](https://facebook.github.io/prophet) and we plot predictions with R and its famous ggplot library.

labels:
  tag: sales

tasks:
  
  - id: query_data
    type: io.kestra.plugin.gcp.bigquery.Query
    projectId: kestra-dev
    serviceAccount: "{{ secret('GCP_CREDS') }}"
    sql: "{{ render(read('scripts/sales/query/get_data.sql')) }}"
    store: true 
  
  - id: write_csv
    type: io.kestra.plugin.serdes.csv.CsvWriter
    from: '{{ outputs.query_data.uri }}'
    
  - id: get_product_id
    type: io.kestra.plugin.scripts.python.Script
    description: We use a python script to extract the distinct unique values of product_id.
    warningOnStdErr: false
    docker:
        image: ghcr.io/kestra-io/pydata
    inputFiles:
      data.csv: '{{ outputs.write_csv.uri }}'
    script: |
      import pandas as pd
      from kestra import Kestra

      data = pd.read_csv("data.csv")
      product_id = [int(x) for x in list(data.product_id.unique())]
      print(product_id)
      Kestra.outputs({"product_id": product_id})


  - id: parallel_forecast
    type: io.kestra.core.tasks.flows.EachParallel
    description: For each product_id value, we run a forecast to predict the number of orders for the next 5 days.
    value: '{{ outputs.get_product_id.vars.product_id }}'
    tasks:

      - id: sequential
        type: io.kestra.core.tasks.flows.Sequential
        tasks:

          - id: working_dir_forecast
            type: io.kestra.core.tasks.flows.WorkingDirectory
            tasks:
              
              - id: forecast
                type: io.kestra.plugin.scripts.python.Script
                warningOnStdErr: false
                docker:
                    image: ghcr.io/kestra-io/pydata
                inputFiles:
                  data.csv: '{{ outputs.write_csv.uri }}'
                beforeCommands: 
                  - pip install prophet
                script: "{{ render(read('scripts/sales/src/forecast.py')) }}"
                

              - id: rscript
                type: io.kestra.plugin.scripts.r.Script
                warningOnStdErr: false
                docker:
                  image: ghcr.io/kestra-io/rdata
                script: |
                  library(ggplot2)
                  library(readr)
                  library(dplyr)

                  historic = read_csv("historic.csv") %>% mutate(group="historic", yhat=y)
                  forecast = read_csv("forecast.csv") %>% mutate(group="forecast")
                  data = bind_rows(historic, forecast)

                  plot = ggplot(data=data, aes(x=ds, y=yhat, color=group)) +
                  geom_line() +
                  geom_point()
                  
                  ggsave("{{outputDir}}/plot.png")
                  
                  
triggers:

  - id: deps_etl
    type: io.kestra.core.models.triggers.types.Flow
    conditions:
      - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition
        namespace: shiny_rocks.product
        flowId: dbt_run
      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition
        in:
          - SUCCESS
