id: forecast_product_orders
namespace: shiny_rocks.sales
description: |
  Shiny Rocks sells two main products. In this flow, we compute orders forecast in parallel for each of these two.
  We first query data of historic orders, serving as the base reference for forecast.
  Then for each product, we compute forecast in Python thanks to the [Prophet library](https://facebook.github.io/prophet) and we plot predictions with R and its famous ggplot library.

labels:
  tag: product

tasks:
  
  - id: query_data
    type: io.kestra.plugin.gcp.bigquery.Query
    serviceAccount: '{{ secret("gcp_creds") }}'
    projectId: kestra-dev
    sql: '{{ read("scripts/shiny_rocks/query/get_data.sql") }}'
    store: true 
  
  - id: write_csv
    type: io.kestra.plugin.serdes.csv.CsvWriter
    from: '{{ outputs.query_data.uri }}'

  - id: get_product_id
    type: io.kestra.plugin.scripts.python.Commands
    description: We use a python script to extract the distinct unique values of product_id.
    warningOnStdErr: false
    docker:
        image: ghcr.io/kestra-io/pydata
    inputFiles:
      data.csv: '{{ outputs.write_csv.uri }}'
    namespaceFiles:
      enabled: true
    commands:
      - python scripts/shiny_rocks/scripts/get_product_id.py

  - id: parallel_forecast
    type: io.kestra.core.tasks.flows.EachParallel
    description: For each product_id value, we run a forecast to predict the number of orders for the next 5 days.
    value: '{{ outputs.get_product_id.vars.product_id }}'
    tasks:
      - id: working_dir_forecast
        type: io.kestra.core.tasks.flows.WorkingDirectory
        namespaceFiles:
          enabled: true
        tasks:
          - id: get_data
            type: io.kestra.core.tasks.storages.LocalFiles
            inputs:
              data.csv: '{{ outputs.write_csv.uri }}'

          
          - id: forecast
            type: io.kestra.plugin.scripts.python.Commands
            warningOnStdErr: false
            docker:
                image: ghcr.io/kestra-io/pydata
            beforeCommands: 
              - pip install prophet
            commands:
              - python scripts/shiny_rocks/scripts/forecast.py --product_id {{ taskrun.value }}

          - id: rscript
            type: io.kestra.plugin.scripts.r.Commands
            warningOnStdErr: false
            docker:
              image: ghcr.io/kestra-io/rdata
            commands:
              - Rscript scripts/shiny_rocks/scripts/plot.R
            outputFiles:
              - plot.png
                  
                  
triggers:

  - id: deps_etl
    type: io.kestra.core.models.triggers.types.Flow
    conditions:
      - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition
        namespace: shiny_rocks.product
        flowId: dbt_run
      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition
        in:
          - SUCCESS
